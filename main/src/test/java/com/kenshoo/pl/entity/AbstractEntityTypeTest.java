package com.kenshoo.pl.entity;

import com.kenshoo.jooq.DataTable;
import com.kenshoo.pl.entity.annotation.Id;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.junit.Test;

import static com.kenshoo.pl.entity.annotation.IdGeneration.Manual;
import static com.kenshoo.pl.entity.annotation.IdGeneration.RetrieveAutoGenerated;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertFalse;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class AbstractEntityTypeTest {


    @Test
    public void test_getIdField_returns_id_with_RetrieveAutoGenerated_annotation() {
        assertThat(EntityWithAutoInc.INSTANCE.getIdGeneration().get(), is(RetrieveAutoGenerated));
        assertThat(EntityWithAutoInc.INSTANCE.getIdField().get(), is(EntityWithAutoInc.INSTANCE.id));
    }

    @Test
    public void test_getIdField_returns_id_without_annotation_as_Manual() {
        assertThat(EntityWithManualId.INSTANCE.getIdGeneration().get(), is(Manual));
        assertThat(EntityWithManualId.INSTANCE.getIdField().get(), is(EntityWithManualId.INSTANCE.id));
    }

    @Test
    public void test_getIdField_returns_nothing_when_no_id_field() {
        assertFalse(EntityWithoutId.INSTANCE.getIdField().isPresent());
        assertFalse(EntityWithoutId.INSTANCE.getIdGeneration().isPresent());
    }

    public static class EntityWithAutoInc extends MockedEntity<EntityWithAutoInc> {

        static EntityWithAutoInc INSTANCE = new EntityWithAutoInc();

        @Id(RetrieveAutoGenerated)
        public static EntityField<EntityWithAutoInc, Integer> id = INSTANCE.field(integerTableField());
    }

    public static class EntityWithManualId extends MockedEntity<EntityWithManualId> {

        static EntityWithManualId INSTANCE = new EntityWithManualId();

        @Id
        public static EntityField<EntityWithManualId, Integer> id = INSTANCE.field(integerTableField());
    }

    public static class EntityWithoutId extends MockedEntity<EntityWithoutId> {
        static EntityWithoutId INSTANCE = new EntityWithoutId();
    }

    public static class MockedEntity<E extends EntityType<E>> extends AbstractEntityType<E> {

        protected MockedEntity() {
            super("xxx");
        }

        @Override public DataTable getPrimaryTable() {
            return mock(DataTable.class);
        }
    }

    private static <R extends Record> TableField<R, Integer> integerTableField() {
        TableField<R, Integer> mocked = mock(TableField.class);
        Table table = mock(DataTable.class);
        when(mocked.getTable()).thenReturn(table);
        when(mocked.getName()).thenReturn("bla bla");
        when(mocked.getType()).thenReturn(Integer.class);
        return mocked;
    }
}
